---
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";

// Interfaces for different schema types
interface Address {
    streetAddress?: string;
    addressLocality?: string;
    postalCode?: string;
    addressCountry?: string;
}

interface MenuItem {
    "@type": "MenuItem";
    name: string;
    description?: string;
    price?: string;
    image?: string;
}

interface MenuSection {
    "@type": "MenuSection";
    name: string;
    description?: string;
    items?: MenuItem[];
}

interface OpeningHoursSpecification {
    "@type": "OpeningHoursSpecification";
    dayOfWeek: string[];
    opens: string;
    closes: string;
}

export interface Props {
    title: string;
    description: string;
    image?: string;
    type?: "Restaurant" | "Menu" | "Event";
    textWhite?: boolean;
    backgroundColor?: string;
    // Schema enrichment props
    schemaEnrichment?: {
        address?: Address;
        telephone?: string;
        email?: string;
        priceRange?: string;
        servesCuisine?: string | string[];
        menu?: MenuSection[];
        openingHours?: string | OpeningHoursSpecification[];
        acceptsReservations?: boolean;
        paymentAccepted?: string[];
        currenciesAccepted?: string[];
        aggregateRating?: {
            ratingValue: number;
            reviewCount: number;
        };
        awards?: string[];
        suitableForDiet?: string[];
    };
}

const { 
    title, 
    description, 
    image, 
    type = "Restaurant",
    textWhite = false,
    backgroundColor ='bg-white',
    schemaEnrichment = {}
} = Astro.props;

// Base schema
const schema: any = {
    "@context": "https://schema.org",
    "@type": type,
    name: title,
    description: description,
};

// Add image if provided
if (image) {
    schema.image = new URL(image, Astro.url);
}

// Add address if provided
if (schemaEnrichment.address) {
    schema.address = {
        "@type": "PostalAddress",
        ...schemaEnrichment.address
    };
}

// Add other optional properties
if (schemaEnrichment.telephone) schema.telephone = schemaEnrichment.telephone;
if (schemaEnrichment.email) schema.email = schemaEnrichment.email;
if (schemaEnrichment.priceRange) schema.priceRange = schemaEnrichment.priceRange;
if (schemaEnrichment.servesCuisine) schema.servesCuisine = schemaEnrichment.servesCuisine;
if (schemaEnrichment.openingHours) schema.openingHours = schemaEnrichment.openingHours;
if (schemaEnrichment.acceptsReservations) schema.acceptsReservations = schemaEnrichment.acceptsReservations;
if (schemaEnrichment.paymentAccepted) schema.paymentAccepted = schemaEnrichment.paymentAccepted;
if (schemaEnrichment.currenciesAccepted) schema.currenciesAccepted = schemaEnrichment.currenciesAccepted;

// Add aggregate rating if provided
if (schemaEnrichment.aggregateRating) {
    schema.aggregateRating = {
        "@type": "AggregateRating",
        ...schemaEnrichment.aggregateRating
    };
}

// Add menu sections if type is Menu and sections are provided
if (type === "Menu" && schemaEnrichment.menu) {
    schema.hasMenuSection = schemaEnrichment.menu;
}

// Add awards if provided
if (schemaEnrichment.awards) {
    schema.awards = schemaEnrichment.awards.map(award => ({
        "@type": "MonetaryAmount",
        name: award
    }));
}

// Add dietary restrictions if provided
if (schemaEnrichment.suitableForDiet) {
    schema.suitableForDiet = schemaEnrichment.suitableForDiet.map(diet => 
        `http://schema.org/${diet}`
    );
}

const menuItems = [
    { name: "Inicio", url: "/" },
    { name: "Menú", url: "/menu" },
    { name: "Carta de Vinos", url: "/carta-vinos" },
    { name: "Eventos", url: "/eventos" },
    { name: "Reservas", url: "/reservas" },
    { name: "Contacto", url: "/contacto" },
];
---

<!doctype html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>Menú {title} | {schemaEnrichment?.address?.streetAddress}</title>  
        <meta name="description" content={description} />
        <link rel="canonical" href={Astro.url} />

        <!-- Open Graph / Facebook -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content={Astro.url} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        {image && <meta property="og:image" content={new URL(image, Astro.url)} />}

        <!-- Twitter -->
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content={Astro.url} />
        <meta property="twitter:title" content={title} />
        <meta property="twitter:description" content={description} />
        {image && <meta property="twitter:image" content={new URL(image, Astro.url)} />}

        <!-- Schema.org for Google -->
        <script type="application/ld+json" set:html={JSON.stringify(schema)} />

        <!-- Fonts -->
        <link
            href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lato:wght@300;400;700&display=swap"
            rel="stylesheet"
        />

        <!-- <ViewTransitions />

        <style is:global>
            :root {
                --color-text: #333;
                --color-bg: #fff;
                --color-primary: #8b4513;
                --color-secondary: #f4a460;
            }
            html {
                font-family: "Lato", system-ui, sans-serif;
                background-color: var(--color-bg);
                color: var(--color-text);
            }
            .font-serif {
                font-family: "Playfair Display", serif;
            }
        </style> -->
    </head>
    <body>
        <Header textWhite={textWhite} backgroundColor={backgroundColor} />
        <slot />
    </body>
</html>