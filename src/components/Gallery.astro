---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface ImageData {
  src: ImageMetadata;
  alt: string;
  title?: string;
}

interface Props {
  images: ImageData[];
  buttonClasses?: string;
}

const { images, buttonClasses } = Astro.props;
---

<div class="mx-auto">
  <div class=`grid grid-cols-1 grid-cols-2 gap-6 ${images.length > 3 ? 'md:grid-cols-3 ' : images.length > 4 ? 'lg:grid-cols-4' : ''}` >
    {
      images.map((image: ImageData, index: number) => (
        <div 
          class="relative overflow-hidden rounded-lg cursor-pointer transition-transform duration-300 hover:scale-[1.03] group"
          data-visible={index < 6 ? 'true' : 'false'}
          style={index >= 6 ? 'display: none;' : ''}
        >
          <Image
            src={image.src}
            alt={image.alt}
            width={800}
            class="w-full aspect-square object-cover object-center"
            quality="mid"
          />
          {image.title && (
            <p class="absolute bottom-0 left-0 right-0 bg-black/70 text-white p-2 m-0 text-sm text-center">
              {image.title}
            </p>
          )}
        </div>
      ))
    }
  </div>
  {images.length > 6 && (
    <div class="text-center mt-8">
      <button
        id="loadMoreBtn"
        class={buttonClasses ? buttonClasses : 'bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors'}
      >
        Cargar m√°s
      </button>
    </div>
  )}
</div>

<!-- Modal -->
<div id="imageModal" class="hidden fixed inset-0 z-50 p-5 bg-black/90 items-center justify-center">
  <button 
    class="absolute top-4 right-6 text-white text-4xl font-bold cursor-pointer hover:text-gray-300 z-50"
    aria-label="Cerrar modal"
  >
    &times;
  </button>
  <div class="flex flex-col items-center justify-center">
    <img id="modalImage" src="" alt="" class="max-w-[90%] max-h-[90vh] mx-auto object-contain" />
    <p id="modalTitle" class="text-center text-white mt-3"></p>
  </div>
</div>

<script>
  let visibleCount = 6;
  const INCREMENT = 6;

  function initGallery(): void {
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage') as HTMLImageElement;
    const modalTitle = document.getElementById('modalTitle');
    const closeButton = modal?.querySelector('button');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    
    // Load More functionality
    loadMoreBtn?.addEventListener('click', () => {
      const items = document.querySelectorAll('[data-visible="false"]');
      items.forEach((item, index) => {
        if (index < INCREMENT) {
          (item as HTMLElement).style.display = '';
          item.setAttribute('data-visible', 'true');
        }
      });
      
      if (items.length <= INCREMENT) {
        loadMoreBtn.style.display = 'none';
      }
    });

    // Modal functionality
    document.querySelectorAll<HTMLElement>('.grid > div').forEach(item => {
      item.addEventListener('click', function() {
        const img = this.querySelector('img');
        const title = this.querySelector('p');
        
        if (modal && modalImg && modalTitle && img) {
          modal.classList.remove('hidden');
          modal.classList.add('flex');
          modalImg.src = img.src;
          modalImg.alt = img.alt;
          
          if (title) {
            modalTitle.textContent = title.textContent;
            modalTitle.classList.remove('hidden');
          } else {
            modalTitle.classList.add('hidden');
          }
        }
      });
    });

    const closeModal = (): void => {
      if (modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
      }
    };

    closeButton?.addEventListener('click', closeModal);

    modal?.addEventListener('click', (e: Event) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape' && modal?.classList.contains('flex')) {
        closeModal();
      }
    });
  }

  document.addEventListener('DOMContentLoaded', initGallery);
  document.addEventListener('astro:page-load', initGallery);
</script>