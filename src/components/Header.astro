---
import { Utensils, Menu, X } from "lucide-react";
import { navItems } from "../data/header-nav-links";

const { textWhite, backgroundColor } = Astro.props;


---

<header
    class={`${backgroundColor} ${textWhite ? "text-white" : "text-black"}`}
>
    <div class="lg:max-w-[85%] mx-auto">
        <div class="flex p-4 items-center sticky top-0 z-10"> 
            <a class="flex items-center justify-center" href="/">
                <Utensils className="h-6 w-6" />
                <span class="sr-only"></span>
            </a>
            <button
                id="menuButton"
                class="ml-auto lg:hidden transition-transform duration-300 ease-in-out"
                aria-label="Menu"
            >
                <Menu className="h-6 w-6" id="menuIcon" />
                <X className="h-6 w-6 hidden" id="closeIcon" />
            </button>
            <nav
                id="mobileNav"
                class={`hidden lg:flex lg:ml-auto lg:gap-6 fixed lg:relative max-sm:top-14 left-0 right-0 ${backgroundColor} p-4 lg:p-0 shadow-lg lg:shadow-none transform transition-all duration-300 ease-in-out`}
            >
                {
                    navItems.map((item) => (
                        <a
                            class="text-sm font-medium hover:underline underline-offset-4 block lg:inline-block py-2 lg:py-0 transition-colors duration-200 ease-in-out"
                            href={item.href}
                        >
                            {item.name}
                        </a>
                    ))
                }
            </nav>
        </div>
    </div>
</header>

<script>
    const setupMenu = () => {
        const menuButton = document.getElementById("menuButton");
        const mobileNav = document.getElementById("mobileNav");
        const menuIcon = document.getElementById("menuIcon");
        const closeIcon = document.getElementById("closeIcon");

        const closeMenu = () => {
            if (menuButton && mobileNav && menuIcon && closeIcon) {
                menuButton.classList.remove("rotate-180");
                menuIcon.classList.remove("hidden");
                closeIcon.classList.add("hidden");
                mobileNav.classList.add("hidden");
                mobileNav.classList.remove("translate-x-0", "opacity-100");
            }
        };

        const toggleMenu = (event: Event) => {
            event.stopPropagation();
            if (menuButton && mobileNav && menuIcon && closeIcon) {
                menuButton.classList.toggle("rotate-180");
                menuIcon.classList.toggle("hidden");
                closeIcon.classList.toggle("hidden");
                mobileNav.classList.toggle("hidden");
                
                if (!mobileNav.classList.contains("hidden")) {
                    mobileNav.classList.add("translate-x-0", "opacity-100");
                } else {
                    mobileNav.classList.remove("translate-x-0", "opacity-100");
                }
            }
        };

        // Cerrar menú al hacer click fuera
        document.addEventListener("click", (event) => {
            const isMenuOpen = !mobileNav?.classList.contains("hidden");
            if (isMenuOpen && !mobileNav?.contains(event.target as Node)) {
                closeMenu();
            }
        });

        // Cerrar menú al hacer scroll
        let lastScroll = window.scrollY;
        window.addEventListener("scroll", () => {
            const currentScroll = window.scrollY;
            if (Math.abs(currentScroll - lastScroll) > 10) { // Umbral de 10px para evitar cierres accidentales
                closeMenu();
            }
            lastScroll = currentScroll;
        });

        // Prevenir que los clicks dentro del nav cierren el menú
        mobileNav?.addEventListener("click", (event) => {
            event.stopPropagation();
        });

        menuButton?.addEventListener("click", toggleMenu);
    };

    // Setup on initial load and after navigation
    setupMenu();
    document.addEventListener("astro:page-load", setupMenu);
</script>