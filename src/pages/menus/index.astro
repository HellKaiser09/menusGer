---
import { Image } from "astro:assets";
import main_menu from "../phone_with_menu.png";
import RestaurantLayout from "../../layouts/RestaurantLayout.astro";
import { ArrowRight } from "lucide-react";
import tacos from './quesabirrias.laregia.mty/tacos.jpg';
import pizza from './fast-food/pizza.png';
import antojitosdonaguillelogo from './antojitosdonaguille/logo.jpg';
import alchemycoffeelablogo from './alchemycoffeelab/espuma.jpg';
import antojitostauro from './antojitostauro/logo.jpg';
import papachinislogo from './papachinis/logo.jpg';
type Industry = "Todos" | "Restaurante" | "Café" | "Bar" | "Hotel";
type BusinessType = "Todos" | "Casual" | "Formal" | "Fast Food" | "Buffet";
type Capacity = "Todos" | "0-50" | "51-100" | "101-200" | "200+";

interface Restaurant {
    name: string;
    description: string;
    image: ImageMetadata;
    link: string;
    restaurantLink: string;
    industry: Industry;
    type: BusinessType;
}

// Add filter options with type safety
const industries: Industry[] = ["Todos", "Restaurante", "Café", "Bar", "Hotel"];
const types: BusinessType[] = ["Todos", "Casual", "Formal", "Fast Food", "Buffet"];
const capacities: Capacity[] = ["Todos", "0-50", "51-100", "101-200", "200+"];

const case_studies: Restaurant[] = [
    {
        name: "Quesabirrias “La Regia”",
        description: "Tacos, empalmes, quesadillas, birrias y mas...",
        restaurantLink: "/menus/quesabirrias.laregia.mty",
        image: tacos,
        link: "/menus/quesabirrias.laregia.mty",
        industry: "Restaurante",
        type: "Casual",
    },
    {
        name: "Antojitos Tauro",
        description: "Tacos, empalmes, quesadillas, birrias y mas...",
        restaurantLink: "/menus/antojitostauro",
        image: antojitostauro,
        link: "/menus/antojitostauro",
        industry: "Restaurante",
        type: "Casual",
    },
    {
        name: "FastFood",
        description: "Fast food",
        restaurantLink: "/menus/fast-food",
        image: pizza,
        link: "/menus/fast-food",
        industry: "Restaurante",
        type: "Casual",
    },
    {
        name: "Antojitos Doña Guille",
        description: "El Auténtico Sabor Tapatío",
        restaurantLink: "/menus/antojitosdonaguille",
        image: antojitosdonaguillelogo,
        link: "/menus/antojitosdonaguille",
        industry: "Bar",
        type: "Formal",
    },
    {
        name: "AlchemistCoffeLab",
        description: "AlchemistCoffeLab",
        restaurantLink: "/menus/alchemycoffeelab",
        image: alchemycoffeelablogo,
        link: "/menus/alchemycoffeelab",
        industry: "Café",
        type: "Formal",
    },
    {
        name: "Papachinis Zona de Snack",
        description: "Elotes, nachos, hot dogs hamburguesas tostadas tostitos y más...",
        restaurantLink: "/menus/papachinis",
        image: papachinislogo,
        link: "/menus/papachinis",
        industry: "Restaurante",
        type: "Fast Food",
    }
];
---

<RestaurantLayout title="Menus" description="Menus" backgroundColor="bg-gray-50">
    <div class="bg-gradient-to-b from-gray-50 to-white min-h-screen py-16">
        <div class="max-w-[85%] mx-auto">
            <h2 class="text-4xl font-bold text-gray-900 mb-12 text-center bg-clip-text text-transparent bg-gradient-to-r from-gray-900 to-gray-600">
                Los restaurantes que usan nuestros menús.
            </h2>

            <!-- Filtros -->
            <div class="mb-8 flex flex-wrap gap-4 justify-center">
                <select 
                    id="industry-filter" 
                    class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-200"
                >
                    {industries.map((industry) => (
                        <option value={industry}>{industry}</option>
                    ))}
                </select>

                <select 
                    id="type-filter" 
                    class="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-200"
                >
                    {types.map((type) => (
                        <option value={type}>{type}</option>
                    ))}
                </select>
            </div>

            <div id="restaurants-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto">
                {case_studies.map((study) => (
                    <div 
                        class="restaurant-card p-6 border border-gray-200 hover:border-gray-300 transition-all duration-300 bg-white shadow-sm hover:shadow-md"
                        data-industry={study.industry}
                        data-type={study.type}
                    >
                        <div class="aspect-square relative overflow-hidden rounded-lg mb-6">
                            <Image
                                src={study.image}
                                alt={study.name}
                                class="object-cover object-bottom w-full h-full transform group-hover:scale-105 transition-transform duration-300"
                            />
                        </div>
                        <h2 class="text-xl font-semibold text-gray-800 mb-2">
                            <a href={study.restaurantLink}>{study.name}</a>
                        </h2>
                        <p class="text-gray-600">{study.description}</p>
                        <div class="mt-4 flex flex-wrap gap-2">
                            <span class="text-sm bg-gray-100 px-2 py-1 rounded">{study.industry}</span>
                            <span class="text-sm bg-gray-100 px-2 py-1 rounded">{study.type}</span>
                        </div>
                        <a href={study.link} class="group mt-4 block">
                            <span class="flex items-center justify-between">
                                Leer la historia completa
                                <div class="p-1 rounded-full border border-gray-200 group-hover:border-gray-300 transition-all duration-300">
                                    <ArrowRight />
                                </div>
                            </span>
                        </a>
                    </div>
                ))}
            </div>
        </div>
    </div>
</RestaurantLayout>

<script>
    type FilterValue = string | null;

    interface HTMLElementWithDataset extends HTMLElement {
        dataset: {
            industry: string;
            type: string;
            capacity: string;
        };
    }

    class RestaurantFilter {
        private industryFilter: HTMLSelectElement;
        private typeFilter: HTMLSelectElement;
        private capacityFilter: HTMLSelectElement;

        constructor() {
            // Initialize with null checks
            const industryElement = document.getElementById('industry-filter');
            const typeElement = document.getElementById('type-filter');
            const capacityElement = document.getElementById('capacity-filter');

            if (!industryElement || !typeElement || !capacityElement) {
                throw new Error('Required filter elements not found');
            }

            this.industryFilter = industryElement as HTMLSelectElement;
            this.typeFilter = typeElement as HTMLSelectElement;
            this.capacityFilter = capacityElement as HTMLSelectElement;

            this.initializeEventListeners();
        }

        private initializeEventListeners(): void {
            this.industryFilter.addEventListener('change', () => this.filterRestaurants());
            this.typeFilter.addEventListener('change', () => this.filterRestaurants());
            this.capacityFilter.addEventListener('change', () => this.filterRestaurants());
        }

        private getFilterValue(element: HTMLSelectElement): FilterValue {
            return element.value || null;
        }

        private filterRestaurants(): void {
            const industryValue = this.getFilterValue(this.industryFilter);
            const typeValue = this.getFilterValue(this.typeFilter);
            const capacityValue = this.getFilterValue(this.capacityFilter);

            const restaurants = document.querySelectorAll('.restaurant-card');

            restaurants.forEach((restaurant) => {
                try {
                    const element = restaurant as HTMLElementWithDataset;
                    const industry = element.dataset.industry;
                    const type = element.dataset.type;
                    const capacity = element.dataset.capacity;

                    if (!industry || !type || !capacity) {
                        console.error('Missing data attributes on restaurant card');
                        return;
                    }

                    const matchIndustry = industryValue === 'Todos' || industry === industryValue;
                    const matchType = typeValue === 'Todos' || type === typeValue;
                    const matchCapacity = capacityValue === 'Todos' || capacity === capacityValue;

                    element.style.display = (matchIndustry && matchType && matchCapacity) ? 'block' : 'none';
                } catch (error) {
                    console.error('Error filtering restaurant:', error);
                }
            });
        }
    }

    // Initialize the filter when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        try {
            new RestaurantFilter();
        } catch (error) {
            console.error('Failed to initialize restaurant filter:', error);
        }
    });
</script>